<?php

namespace Unit2\RouterNameLog\App;

use Magento\Framework\App\ActionFlag;
use Magento\Framework\App\AreaList;
use Magento\Framework\App\ObjectManager;
use Magento\Framework\App\Request\ValidatorInterface as RequestValidator;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\App\ResponseInterface;
use Magento\Framework\App\RouterListInterface;
use Magento\Framework\App\State;
use Magento\Framework\Event\ManagerInterface as EventManagerInterface;
use Magento\Framework\Message\ManagerInterface as MessageManager;
use Psr\Log\LoggerInterface;

class FrontController extends \Magento\Framework\App\FrontController
{
    /**
     * @var LoggerInterface|null
     */
    private $logger;

    public function __construct(
        RouterListInterface $routerList,
        ResponseInterface $response,
        ?RequestValidator $requestValidator = null,
        ?MessageManager $messageManager = null,
        LoggerInterface $logger = null,
        ?State $appState = null,
        ?AreaList $areaList = null,
        ?ActionFlag $actionFlag = null,
        ?EventManagerInterface $eventManager = null,
        ?RequestInterface $request = null)
    {
        parent::__construct($routerList, $response, $requestValidator, $messageManager, $logger, $appState, $areaList, $actionFlag, $eventManager, $request);
        //$this->logger = $logger;
        $this->logger = $logger
            ?? ObjectManager::getInstance()->get(LoggerInterface::class);
    }
    public function dispatch(RequestInterface $request)
    {
        foreach ($this->_routerList as $router){
            $routerName =get_class($router);
            $this->logger->alert($routerName);
        }

        return parent::dispatch($request); // TODO: Change the autogenerated stub
    }
}
